local sim = alife()

class "DynQuest" 

--[[ --TODO
	type_work:
	0 - Забрать предмет.
	1 - Ликвидация.
	2 - Приблизится (имитация взаимодействия).
	3 - Сопровождение.
]] --TODO

function DynQuest:__init(id, executor, employer, subject)
	local task_ini 		= task_manager.CRandomTask().task_ini
	
	self.executor		= executor -- Исполнитель
	self.target			= task_ini:r_string(id, "target")
	self.target			= xr_logic.parse_condlist(self.executor, id, "task_condlist", self.target)
	self.type_work		= type_work --TODO
	self.employer		= employer -- работодатель
	self.keeper			= self.employer  -- храниль -и
	self.storage		= {}  -- Хранилище свободных данных для квеста
	self.subject		= subject  -- Субъект квеста (server object)
		
	self.step		= 0

	self.effector		= dtask_actions.rtrue  -- ф-ция которая выполнится если условие достижения цели выполнено, должно возвратить true чтобы учесть дейтвие выполненным и разрешить переключение на следующие цели (сделать шаг)
	self.conder			= dtask_actions.def_conder -- Ф-ция - условие для состояния достижения цели 
	
	self._strTarget, self.currentTargetId = self:targetParser() -- строка: стори ИД цели

	self.globalPurpose = sim:object(self.currentTargetId)
	self.purpose = self.globalPurpose

	self.condlist 		= {}
	
	if task_ini:line_exist(id, "condlist") then
		table.insert(self.condlist, xr_logic.parse_condlist(self.executor, "condlist", "self.condlist", task_ini:r_string(id, "condlist")) )
	end
	
	local i, conName = 1, "condlist_1"
	while task_ini:line_exist(id, conName) do
		table.insert(self.condlist,
			xr_logic.parse_condlist(self.executor, conName, "self.condlist", task_ini:r_string(id, conName))
		)
		i = i + 1
		conName = "condlist_" .. tostring(i)
	end
	return self
end

do
	local strTarget, effector, conder, targetStoryId
	function DynQuest:targetParser()
		if self.step == 0 then
			self.currentTargetId = self.employer.id
			return "", self.currentTargetId
		end
		
		strTarget = xr_logic.pick_section_from_condlist(db.actor, self.executor, self.target) -- Парсятся цели из строки {+infp -infp =fun !fun} section %+infp -infp =fun%

		if self._strTarget == strTarget then
			return strTarget, self.currentTargetId
		end

		effector, conder = 'rtrue', 'def_conder'
		
		if string.find(strTarget, "|") then 
			targetStoryId, effector = string.match(strTarget, "(.+)[|](.+)")
			
			if string.find(targetStoryId, "|") then
				targetStoryId, conder = string.match(targetStoryId, "(.+)[|](.+)")
			end
		end
		 
		self.effector = dtask_actions[effector]
		self.conder = dtask_actions[conder]
		
		return targetStoryId, get_story_object_id(targetStoryId)
	end
end

function DynQuest:changeTarget (id, str)
	self.currentTargetId = id
	self._strTarget = str
	
	self.globalPurpose = sim:object(self.currentTargetId)
	self.purpose = self.globalPurpose
end

function DynQuest:nextStep()	
	if self.step > 0 then 
		if self:effector() then 
			self.step = self.step + 1
		end 
	else
		self.step = self.step + 1
	end
	return log("! STEP|"..tostring(self.step))
end

function DynQuest:progress(act)
	if not act then return end
		
	if act == "complete" then	
		log "~complete"
		self:shutdown(true)
	elseif act == "fail" then 
		self:shutdown(true)
	elseif act == "reversed" then
		self:shutdown(true)
	end
end

do
	local str_targetSid, targetId
	function DynQuest:update() 	log("! DynQuest:update")
		str_targetSid, targetId = self:targetParser()
		if not (str_targetSid and targetId) then
			return abort("DynQst: new target parsing as nil!") 
		end
		
		if self._strTarget ~= str_targetSid then
			self:changeTarget(targetId, str_targetSid) 
		end

		for i=1, #self.condlist do
			self:progress( xr_logic.pick_section_from_condlist(db.actor, self.executor, self.condlist[i]) )
		end
	end
end

function DynQuest:setState() 
	local npc_id = self.executor.id
	self.executor.dynQuest = self
	
	if self.executor.online then
		self.cexecutor = level.object_by_id(npc_id)
		
		if not db.storage[npc_id] then
			db.storage[npc_id] = {}
		end

		local bind = self.cexecutor:binded_object()
		bind.updDynQuest = function(binder)
			return self:update()
		end
	end
	
	return self:setLogic()
end

local scheme, section, filename = "pointer", "pointer", 'xr_targeter'

function DynQuest:deactivateScheme(st)	
	self.cexecutor = self.cexecutor or level.object_by_id(npc_id)
	--************************************************* part code from xr_logic.switch_to_section
	local npc_id = self.cexecutor:id()
	
	if (axr_beh) then utils.save_var(self.cexecutor, "path_index",1) end

	st = st or db.storage[npc_id]["pointer"] -- моё 
	xr_logic.issue_event(self.cexecutor, st, "deactivate", self.cexecutor, st)
	db.storage[npc_id]["pointer"] = nil
	
	db.storage[npc_id].exit_from_smartcover_initialized = nil
	db.storage[npc_id].active_section = nil
	db.storage[npc_id].active_scheme = nil
end

function DynQuest:shutdown(deactivate)
	if self.executor.online then
		self.cexecutor = self.cexecutor or level.object_by_id(npc_id)
		local bind = self.cexecutor:binded_object()
		bind.updDynQuest = function() end
	end	
	
	if deactivate then
		self:deactivateScheme()
	end
	
	if self.executor.offline_behavior then -- update offline behavior
		self.executor.offline_behavior:shutdown() 
	end
	
	self.executor.dynQuest = nil
end

function DynQuest:setLogic()  
	if self.executor.online then
		self.cexecutor = self.cexecutor or level.object_by_id(npc_id)
		local npc_id = self.cexecutor:id()
		
		self:deactivateScheme()
		--************************************************ part code from xr_logic.activate_by_section
		db.storage[npc_id].activation_time = time_global()
		db.storage[npc_id].activation_game_time = game.get_game_time()

		-- Сбросить общие схемы:
		xr_logic.reset_generic_schemes_on_scheme_switch(self.cexecutor, scheme, section)

		_G[filename].set_scheme(self.cexecutor, self.globalPurpose, self)

		db.storage[npc_id].active_section = section
		db.storage[npc_id].active_scheme = scheme

		return xr_logic.issue_event(self.cexecutor, db.storage[npc_id][scheme], "activate_scheme", false, self.cexecutor)
	else
		xr_targeter.Offline(self.executor)
	end
end

--**************************************************************************************************************************--
--**************************************************************************************************************************--

function Load(reader)
	local dynIdQuest = reader:r_stringZ()
end

function Save(packet, dynIdQuest)
	return packet:w_stringZ(dynIdQuest)
end

