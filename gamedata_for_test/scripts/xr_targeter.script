local sim = alife()

class "go_target" (action_base)

function go_target:__init (npc, action_name, storage) super(nil, action_name)
	log("# go_target:__init")

	self.st = storage
	--self.object = npc 
	self.sobj = sim:object(npc:id())  
	self.parent_purpose = false
	self.lastPos = false
end 

function go_target:initialize() 
	action_base.initialize(self)
	self.state = -1 -- 0 go, 1 anim, 2 ?
	log("# go_target:initialize")
	
	return self:goner() 
end

function go_target:goner()
	self.st.dqAnim = false
	self.object:set_desired_position()
	self.object:set_desired_direction()
	
	self.object:clear_animations()
	
	self.object:inactualize_patrol_path()
	
	self.object:set_body_state(move.standing)
	self.object:set_detail_path_type(move.line)
	self.object:set_mental_state(anim.danger)
	self.object:set_movement_selection_type(game_object.alifeMovementTypeMask)
	self.object:set_movement_type(move.run)
	self.object:set_path_type(game_object.game_path)
	self.object:set_sight(look.path_dir, nil, 0)
	state_mgr.set_state (self.object, "run")
	
	return self:get_path()
end

function go_target:get_path()
	log("#get_path")
	self.object:set_path_type(game_object.level_path)
	utils.send_to_nearest_accessible_vertex(self.object, self.sobj.dynQuest.purpose.m_level_vertex_id, "xr_targeter")
		
	self.object:set_sight (look.path_dir, nil, 0)
	--self.state = 0
	state_mgr.set_state (self.object, 'run')
	
	log("! Tar_lv_"..tostring(self.sobj.dynQuest.purpose.m_level_vertex_id))
	self.lastPorpuseLV = self.sobj.dynQuest.purpose.m_level_vertex_id
end

function go_target:anim()
	self.object:set_desired_position()
	self.object:set_desired_direction()
	
	--self.state = 1
	
	self.sobj.dynQuest:nextStep(self)
	log("EVENT!")
end

function go_target:execute()
	action_base.execute(self)
	
	if self.sobj.dynQuest.purpose then
		if self.sobj.dynQuest:conder(self) then
			return self:anim()
		elseif self.sobj.dynQuest.purpose.m_level_vertex_id ~= self.lastPorpuseLV then 
			return self:get_path()
		end
	end
end

function go_target:finalize()
    action_base.finalize(self)
    log("# go_target:finalize")
end

class "need" (property_evaluator)

function need:__init(storage, name, npc, dynQuest) super(nil, name)
	--self.dynQuest = dynQuest
	self.sobj = sim:object(npc:id()) --db.storage[npc:id()]
end

function need:evaluate()
	return not not self.sobj.dynQuest 
end

local ff = false
function add_to_binder(npc, ini, scheme, section, storage, dynQuest)
	log("# add_to_binder")
	local operators	= {}
	local properties = {}

	local manager = npc:motivation_action_manager()
	
	operators["action_targeter"] = xr_actions_id.zmey_remark_base + 2 -- 
	
	properties["needed"] = xr_evaluators_id.zmey_remark_base + 4
	properties["at_point"] = xr_evaluators_id.zmey_remark_base + 5
	properties["anim_end"] = xr_evaluators_id.zmey_remark_base + 6
	properties["state_mgr_logic_active"] = xr_evaluators_id.state_mgr + 4

	-- evaluators
	manager:add_evaluator(properties["needed"], need(storage, "need", npc, dynQuest)) -- exist task on NPC
	
	local new_action = this.go_target(npc, "go_target", storage)
	new_action:add_precondition(world_property(stalker_ids.property_alive, true))
	new_action:add_precondition(world_property(stalker_ids.property_danger, false))
	new_action:add_precondition(world_property(stalker_ids.property_enemy, false))
	new_action:add_precondition(world_property(stalker_ids.property_anomaly, false))
	
	new_action:add_precondition(world_property(properties["needed"], true))

	new_action:add_effect (world_property(properties["needed"], false))
	new_action:add_effect (world_property(properties["state_mgr_logic_active"], false))

	manager:add_action(operators["action_targeter"], new_action)
	
	-- Зарегистрировать все actions, в которых должен быть вызван метод reset_scheme при изменении настроек схемы:
	xr_logic.subscribe_action_for_events(npc, storage, new_action)

	new_action = manager:action(xr_actions_id.alife)
	new_action:add_precondition(world_property(properties["needed"], false))
	ff = true
end

class "Offline" (xr_offliner.offliner)

function Offline:__init(sobj)	
	super(sobj)
	
	self.dynQuest = sobj.dynQuest
	self:checkTarget()
end

function Offline:checkTarget()
	if self.dynQuest.purpose.m_level_vertex_id ~= self.lastLV or self.dynQuest.purpose.m_game_vertex_id ~= self.lastGV then
		log("! rt_"..tostring(self.dynQuest.purpose:name()))
		self:setTargetVertices(self.dynQuest.purpose.m_level_vertex_id, self.dynQuest.purpose.m_game_vertex_id)
		self.lastLV = self.dynQuest.purpose.m_level_vertex_id
		self.lastGV = self.dynQuest.purpose.m_game_vertex_id
	end
end

function Offline:update()
	self.dynQuest:update()
	
	if self.dynQuest.purpose.m_game_vertex_id == self.object.m_game_vertex_id and
	self.dynQuest.purpose.m_level_vertex_id == self.object.m_level_vertex_id then
		self.dynQuest:nextStep(self)
		log("EVENT!")
	end
	
	return self:checkTarget() 
end

function set_scheme(npc, target, dynQuest)
	xr_logic.reset_generic_schemes_on_scheme_switch(npc, 'pointer', 'pointer')
	
	local id = npc:id()	

	if not db.storage[id] then
		db.storage[id] = {}
	end
	
	if not db.storage[id]["pointer"] then
		db.storage[id]["pointer"] = {} 
	end
	
	local st = db.storage[id]["pointer"]
	st.npc = npc
	st.logic = {}
	
	add_to_binder(npc, ini, "pointer", 'pointer', st, dynQuest)

	st.section = "pointer"
	st.ini = ini
	
	local _oldFunc = xr_offliner.onOffline
	
	xr_offliner.onOffline = function(sobj)
		if sobj.id == npc:id() then
			 xr_targeter.Offline(sobj)
		end
		return _oldFunc(sobj)
	end
end

